#include <iostream>

struct TreeNode {
    int data;
    TreeNode* left;
    TreeNode* right;
};

int findMax(TreeNode* root) {
    if (root == nullptr) {
        // Return a value that indicates an empty tree (you can choose a suitable value).
        return INT_MIN;
    }

    if (root->right == nullptr) {
        // If there is no right subtree, the maximum value is at the current node.
        return root->data;
    }

    // Otherwise, recursively search in the right subtree.
    return findMax(root->right);
}

int main() {
    // Example usage:
    TreeNode* root = new TreeNode{10, nullptr, nullptr};
    root->left = new TreeNode{5, nullptr, nullptr};
    root->right = new TreeNode{15, nullptr, nullptr};
    root->left->left = new TreeNode{3, nullptr, nullptr};
    root->left->right = new TreeNode{8, nullptr, nullptr};

    int maxValue = findMax(root);
    std::cout << "Maximum value in the BST: " << maxValue << std::endl;

    // Don't forget to free the memory allocated for the tree to avoid memory leaks.
    // Implement a function to deallocate the tree nodes.
    
    return 0;
}

