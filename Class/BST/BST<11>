#include <iostream>

class node {
public:
    int value;
    node* Left;
    node* Right;

    // Constructor for the node
    node(int val) {
        value = val;
        Left = nullptr;
        Right = nullptr;
    }
};

class BST {
public:
    node *root;

    // Constructor for the BST
    BST() {
        root = nullptr;
    }

    // Function to insert a value into the BST
    void Insert(int value) {
        root = InsertRecursive(root, value);
    }

    // Helper function for insertion
    node* InsertRecursive(node* current, int value) {
        if (current == nullptr) {
            return new node(value);
        }
        if (value < current->value) {
            current->Left = InsertRecursive(current->Left, value);
        } else if (value > current->value) {
            current->Right = InsertRecursive(current->Right, value);
        }
        return current;
    }

    // Function to search for a value in the BST
    bool Search(int value) {
        return SearchRecursive(root, value);
    }

    // Helper function for searching
    bool SearchRecursive(node* current, int value) {
        if (current == nullptr) {
            return false;
        }
        if (current->value == value) {
            return true;
        } else if (value < current->value) {
            return SearchRecursive(current->Left, value);
        } else {
            return SearchRecursive(current->Right, value);
        }
    }
};

int main() {
    BST bst;
    bst.Insert(10);
    bst.Insert(20);
    bst.Insert(25);
    bst.Insert(50);
    bst.Insert(8);
    bst.Insert(9);

    std::cout << bst.Search(10) << "\n"; // 1
    std::cout << bst.Search(9) << "\n";  // 1
    std::cout << bst.Search(20) << "\n"; // 1
    std::cout << bst.Search(60) << "\n"; // 0

    return 0;
}

