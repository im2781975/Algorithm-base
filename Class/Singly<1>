#include <iostream>

class Node {
public:
    int data;
    Node* next;

    Node(int val) {
        data = val;
        next = nullptr;
    }
};

class SinglyLinkedList {
private:
    Node* head;

public:
    SinglyLinkedList() {
        head = nullptr;
    }

    void addToFront(int val) {
        Node* newNode = new Node(val);
        newNode->next = head;
        head = newNode;
    }

    void printList() {
        Node* current = head;
        std::cout << "Singly linked list containing the elements [";
        while (current != nullptr) {
            std::cout << current->data;
            current = current->next;
            if (current != nullptr) {
                std::cout << ", ";
            }
        }
        std::cout << "]\n";
    }

    void removeFirst() {
        if (head != nullptr) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }

    void removeLast() {
        if (head != nullptr) {
            if (head->next == nullptr) {
                delete head;
                head = nullptr;
            } else {
                Node* current = head;
                while (current->next->next != nullptr) {
                    current = current->next;
                }
                delete current->next;
                current->next = nullptr;
            }
        }
    }

    int findAtIndex(int index) {
        Node* current = head;
        int currentIndex = 0;
        while (current != nullptr) {
            if (currentIndex == index) {
                return current->data;
            }
            current = current->next;
            currentIndex++;
        }
        return -1;  // Element not found
    }

    void addToBack(int val) {
        Node* newNode = new Node(val);
        if (head == nullptr) {
            head = newNode;
        } else {
            Node* current = head;
            while (current->next != nullptr) {
                current = current->next;
            }
            current->next = newNode;
        }
    }

    bool contains(int element) {
        Node* current = head;
        while (current != nullptr) {
            if (current->data == element) {
                return true;
            }
            current = current->next;
        }
        return false;
    }
};

int main() {
    SinglyLinkedList list;
    int elements[] = {1, 2, 3, 4, 5};
    for (int element : elements) {
        list.addToBack(element);
    }

    list.addToFront(0);
    list.printList();

    list.removeFirst();
    list.printList();

    list.removeLast();
    list.printList();

    int indexToFind = 2;
    int foundElement = list.findAtIndex(indexToFind);
    if (foundElement != -1) {
        std::cout << foundElement << "\n";
    }

    list.addToBack(0);
    list.printList();

    int elementToCheck = 3;
    bool containsElement = list.contains(elementToCheck);
    if (containsElement) {
        std::cout << "True\n";
    }

    return 0;
}
