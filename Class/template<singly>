#include <iostream>

template <typename T>
class Node {
public:
    T data;
    Node* next;

    Node(T value) : data(value), next(nullptr) {}
};

template <typename T>
class Stack {
private:
    Node<T>* top;

public:
    Stack() : top(nullptr) {}

    void push(T value) {
        Node<T>* newNode = new Node<T>(value);
        newNode->next = top;
        top = newNode;
    }

    void pop() {
        if (top) {
            Node<T>* temp = top;
            top = top->next;
            delete temp;
        }
    }

    T peek() {
        if (top) {
            return top->data;
        }
        throw std::runtime_error("Stack is empty.");
    }

    bool isEmpty() {
        return top == nullptr;
    }
};

int main() {
    Stack<int> intStack;
    intStack.push(1);
    intStack.push(2);
    intStack.push(3);

    while (!intStack.isEmpty()) {
        std::cout << intStack.peek() << " ";
        intStack.pop();
    }

    Stack<std::string> stringStack;
    stringStack.push("Hello");
    stringStack.push("World");

    while (!stringStack.isEmpty()) {
        std::cout << stringStack.peek() << " ";
        stringStack.pop();
    }

    return 0;
}

