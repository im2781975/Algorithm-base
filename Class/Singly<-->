#include <iostream>

class Node {
public:
    int data;
    Node* next;
    Node(int value) : data(value), next(nullptr) {}
};

class SinglyLinkedList {
private:
    Node* head;
    int size;

public:
    SinglyLinkedList() : head(nullptr), size(0) {}

    // Function to add a node at the end of the linked list
    void addNode(int value) {
        Node* newNode = new Node(value);
        if (head == nullptr) {
            head = newNode;
        } else {
            Node* current = head;
            while (current->next != nullptr) {
                current = current->next;
            }
            current->next = newNode;
        }
        size++;
    }

    // Function to get the value at a specific index
    int getValue(int index) {
        if (index < 0 || index >= size) {
            return -1;
        }
        Node* current = head;
        for (int i = 0; i < index; i++) {
            current = current->next;
        }
        return current->data;
    }

    // Function to delete nodes with data=0
    void deleteZero() {
        Node* current = head;
        Node* prev = nullptr;
        while (current != nullptr) {
            if (current->data == 0) {
                if (prev == nullptr) {
                    head = current->next;
                } else {
                    prev->next = current->next;
                }
                delete current;
                current = prev;
                size--;
            }
            prev = current;
            current = current->next;
        }
    }

    // Function to get the sum of all odd indexed nodes
    int getOddIndexSum() {
        int sum = 0;
        Node* current = head;
        int index = 0;
        while (current != nullptr) {
            if (index % 2 == 1) {
                sum += current->data;
            }
            current = current->next;
            index++;
        }
        return sum;
    }

    // Function to check if the linked list has duplicates
    bool hasDuplicate() {
        Node* current = head;
        while (current != nullptr) {
            Node* checker = current->next;
            while (checker != nullptr) {
                if (current->data == checker->data) {
                    return true;
                }
                checker = checker->next;
            }
            current = current->next;
        }
        return false;
    }
};

