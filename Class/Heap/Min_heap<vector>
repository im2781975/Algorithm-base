#include <iostream>
#include <vector>
using namespace std;
class MinHeap {
    private:
    vector<int> heap;

    void heapifyUp(int idx) {
        while (idx > 0) {
            int parent= (idx - 1) / 2;
            if (heap[idx] < heap[parent]) {
                swap(heap[idx], heap[parent]);
                idx = parent;
            } else {
                break;
            }
        }
    }
    void heapifyDown(int idx) {
        int left= 2 * idx + 1;
        int right = 2 * idx + 2;
        int smallest = idx;

        if (left < heap.size() && heap[left] < heap[smallest]) {
            smallest = left;
        }
        if (right < heap.size() && heap[right] < heap[smallest]) {
            smallest = right;
        }

        if (smallest != idx) {
            swap(heap[idx], heap[smallest]);
            heapifyDown(smallest);
        }
    }

    public:
    // Add a value to the priority queue
    void push(int value) {
        heap.push_back(value);
        heapifyUp(heap.size() - 1);
    }

    // Remove and return the top (minimum) element
    int pop() {
        if (heap.empty()) {
            throw std::runtime_error("Priority Queue is empty");
        }
        int top = heap[0];
        heap[0] = heap.back();
        heap.pop_back();
        heapifyDown(0);
        return top;
    }

    // Return the top (minimum) element without removing it
    int top() {
        if (heap.empty()) {
            throw std::runtime_error("Priority Queue is empty");
        }
        return heap[0];
    }
    bool empty() {
        return heap.empty();
    }
};

int main() {
    MinHeap minHeap;

    minHeap.push(5);
    minHeap.push(2);
    minHeap.push(8);
    minHeap.push(1);

    std::cout << "Top element: " << minHeap.top() << std::endl;

    while (!minHeap.empty()) {
        std::cout << "Popped: " << minHeap.pop() << std::endl;
    }

    return 0;
}

