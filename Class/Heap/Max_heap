#include <vector>
#include <iostream>

class MaxHeap {
private:
    std::vector<int> heap;

    void heapifyUp(int index) {
        int parent = (index - 1) / 2;
        while (index > 0 && heap[index] > heap[parent]) {
            std::swap(heap[index], heap[parent]);
            index = parent;
            parent = (index - 1) / 2;
        }
    }

    void heapifyDown(int index) {
        int leftChild = 2 * index + 1;
        int rightChild = 2 * index + 2;
        int largest = index;

        if (leftChild < heap.size() && heap[leftChild] > heap[largest]) {
            largest = leftChild;
        }
        if (rightChild < heap.size() && heap[rightChild] > heap[largest]) {
            largest = rightChild;
        }

        if (largest != index) {
            std::swap(heap[index], heap[largest]);
            heapifyDown(largest);
        }
    }

public:
    void insert(int value) {
        heap.push_back(value);
        heapifyUp(heap.size() - 1);
    }

    void delete(int index) {
        if (index < 0 || index >= heap.size()) {
            std::cout << "Index out of range" << std::endl;
            return;
        }

        heap[index] = INT_MAX; // Set to a very large value
        heapifyUp(index);
        getMax(); // Remove the max element from the root
    }

    int getMax() {
        if (heap.empty()) {
            std::cout << "Heap is empty" << std::endl;
            return -1; // Or any suitable error value
        }

        int max = heap[0];
        heap[0] = heap.back();
        heap.pop_back();
        heapifyDown(0);

        return max;
    }
};

int main() {
    MaxHeap maxHeap;

    maxHeap.insert(10);
    maxHeap.insert(20);
    maxHeap.insert(5);
    maxHeap.insert(15);
    maxHeap.insert(30);

    std::cout << "Max: " << maxHeap.getMax() << std::endl;

    maxHeap.delete(1);

    std::cout << "Max after deletion: " << maxHeap.getMax() << std::endl;

    return 0;
}

