#include <iostream>

class Node {
public:
    int data;
    Node* prev;
    Node* next;

    Node(int value) {
        data = value;
        prev = nullptr;
        next = nullptr;
    }
};

class DoublyLinkedList {
private:
    Node* head;
    Node* tail;
    int size;

public:
    DoublyLinkedList() {
        head = nullptr;
        tail = nullptr;
        size = 0;
    }

    // Add a function to append a node to the end of the list

    void append(int value) {
        Node* newNode = new Node(value);
        if (head == nullptr) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            newNode->prev = tail;
            tail = newNode;
        }
        size++;
    }

    // Add the 'deleteMid' function

    void deleteMid() {
        if (size == 0) {
            return;
        }

        int mid = size / 2;
        Node* current = head;

        for (int i = 0; i < mid; i++) {
            current = current->next;
        }

        if (current->prev) {
            current->prev->next = current->next;
        }
        if (current->next) {
            current->next->prev = current->prev;
        }
        if (current == head) {
            head = current->next;
        }
        if (current == tail) {
            tail = current->prev;
        }

        delete current;
        size--;
    }

    // Add the 'getMax' function

    int getMax() {
        if (size == 0) {
            return -1; // Return a sentinel value if the list is empty
        }

        int max = head->data;
        Node* current = head->next;

        while (current != nullptr) {
            if (current->data > max) {
                max = current->data;
            }
            current = current->next;
        }

        return max;
    }

    // Add the 'deleteMax' function

    void deleteMax() {
        if (size == 0) {
            return;
        }

        int max = getMax();
        Node* current = head;

        while (current != nullptr) {
            if (current->data == max) {
                Node* temp = current;
                if (current->prev) {
                    current->prev->next = current->next;
                }
                if (current->next) {
                    current->next->prev = current->prev;
                }
                if (current == head) {
                    head = current->next;
                }
                if (current == tail) {
                    tail = current->prev;
                }
                current = current->next;
                delete temp;
                size--;
            } else {
                current = current->next;
            }
        }
    }
};

