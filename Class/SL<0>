#include <iostream>

// Define a structure for a node in the linked list
struct Node {
    int data;
    Node* next;
    Node(int value) : data(value), next(nullptr) {}
};

class LinkedList {
private:
    Node* head;
    Node* tail;

public:
    LinkedList() : head(nullptr), tail(nullptr) {}

    // Insert a value at the beginning
    void insertAtBeginning(int value) {
        Node* newNode = new Node(value);
        if (!head) {
            head = tail = newNode;
        } else {
            newNode->next = head;
            head = newNode;
        }
    }

    // Insert a value at the end
    void insertAtEnd(int value) {
        Node* newNode = new Node(value);
        if (!head) {
            head = tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }

    // Delete a value at the beginning
    void deleteAtBeginning() {
        if (!head) {
            std::cout << "List is empty. Cannot delete from an empty list." << std::endl;
            return;
        }
        Node* temp = head;
        head = head->next;
        delete temp;
    }

    // Delete a value at the end
    void deleteAtEnd() {
        if (!head) {
            std::cout << "List is empty. Cannot delete from an empty list." << std::endl;
            return;
        }
        if (head == tail) {
            delete head;
            head = tail = nullptr;
        } else {
            Node* current = head;
            while (current->next != tail) {
                current = current->next;
            }
            delete tail;
            tail = current;
            tail->next = nullptr;
        }
    }

    // Helper function to find the length of the list
    int getLength() {
        int length = 0;
        Node* current = head;
        while (current) {
            length++;
            current = current->next;
        }
        return length;
    }

    // Insert a value at the middle point
    void insertAtMiddle(int value) {
        int length = getLength();
        if (length < 2) {
            std::cout << "List should have at least two elements to insert in the middle." << std::endl;
            return;
        }

        Node* newNode = new Node(value);
        int mid = length / 2;
        Node* current = head;
        for (int i = 1; i < mid; i++) {
            current = current->next;
        }
        newNode->next = current->next;
        current->next = newNode;
    }

    // Delete a value at the middle point
    void deleteAtMiddle() {
        int length = getLength();
        if (length < 3) {
            std::cout << "List should have at least three elements to delete from the middle." << std::endl;
            return;
        }

        int mid = length / 2;
        Node* current = head;
        for (int i = 1; i < mid - 1; i++) {
            current = current->next;
        }
        Node* temp = current->next;
        current->next = temp->next;
        delete temp;
    }

    // Display the linked list
    void display() {
        Node* current = head;
        while (current) {
            std::cout << current->data << " ";
            current = current->next;
        }
        std::cout << std::endl;
    }
};

int main() {
    LinkedList list;

    list.insertAtEnd(1);
    list.insertAtEnd(2);
    list.insertAtEnd(3);
    list.insertAtEnd(4);
    list.insertAtEnd(5);

    std::cout << "Original List: ";
    list.display();

    list.insertAtBeginning(0);
    std::cout << "After inserting at the beginning: ";
    list.display();

    list.insertAtEnd(6);
    std::cout << "After inserting at the end: ";
    list.display();

    list.deleteAtBeginning();
    std::cout << "After deleting from the beginning: ";
    list.display();

    list.deleteAtEnd();
    std::cout << "After deleting from the end: ";
    list.display();

    list.insertAtMiddle(10);
    std::cout << "After inserting at the middle: ";
    list.display();

    list.deleteAtMiddle();
    std::cout << "After deleting from the middle: ";
    list.display();

    return 0;
}
