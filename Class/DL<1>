#include <iostream>

class Node {
public:
    int data;
    Node* prev;
    Node* next;

    Node(int value) : data(value), prev(nullptr), next(nullptr) {}
};

class DoublyLinkedList {
private:
    Node* head;
    Node* tail;
    int size;

public:
    DoublyLinkedList() : head(nullptr), tail(nullptr), size(0) {}

    void insertHead(int value) {
        Node* newNode = new Node(value);
        if (head == nullptr) {
            head = newNode;
            tail = newNode;
        } else {
            newNode->next = head;
            head->prev = newNode;
            head = newNode;
        }
        size++;
    }

    void insertTail(int value) {
        Node* newNode = new Node(value);
        if (tail == nullptr) {
            head = newNode;
            tail = newNode;
        } else {
            newNode->prev = tail;
            tail->next = newNode;
            tail = newNode;
        }
        size++;
    }

    void insertMid(int value) {
        Node* newNode = new Node(value);
        if (size == 0) {
            head = newNode;
            tail = newNode;
        } else if (size % 2 == 0) {
            // Insert in the middle when the list has an even number of elements
            Node* middle = head;
            for (int i = 0; i < size / 2 - 1; i++) {
                middle = middle->next;
            }
            newNode->prev = middle;
            newNode->next = middle->next;
            middle->next->prev = newNode;
            middle->next = newNode;
        } else {
            // Insert in the middle when the list has an odd number of elements
            Node* middle = head;
            for (int i = 0; i < size / 2; i++) {
                middle = middle->next;
            }
            newNode->prev = middle->prev;
            newNode->next = middle;
            middle->prev->next = newNode;
            middle->prev = newNode;
        }
        size++;
    }

    void display() {
        Node* current = head;
        while (current != nullptr) {
            std::cout << current->data << " ";
            current = current->next;
        }
        std::cout << std::endl;
    }
};

int main() {
    DoublyLinkedList dll;

    dll.insertHead(10);
    dll.insertTail(20);
    dll.insertHead(5);
    dll.insertTail(30);
    dll.insertMid(15);

    dll.display();

    return 0;
}

