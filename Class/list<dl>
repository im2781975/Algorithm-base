#include <iostream>

class Node {
public:
    int data;
    Node* next;
    Node* prev;

    Node(int value) {
        data = value;
        next = nullptr;
        prev = nullptr;
    }
};

class DoublyLinkedList {
public:
    Node* head;
    Node* tail;

    DoublyLinkedList() {
        head = nullptr;
        tail = nullptr;
    }

    void append(int value) {
        Node* newNode = new Node(value);
        if (head == nullptr) {
            head = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            newNode->prev = tail;
            tail = newNode;
        }
    }

    void deleteMid() {
        int count = 0;
        Node* current = head;
        while (current != nullptr) {
            count++;
            current = current->next;
        }

        if (count <= 2) {
            std::cout << "Doubly linked list should have at least 3 elements for deleting the middle element." << std::endl;
            return;
        }

        int mid = count / 2;
        current = head;
        for (int i = 0; i < mid; i++) {
            current = current->next;
        }

        if (current->prev != nullptr) {
            current->prev->next = current->next;
        } else {
            head = current->next;
        }

        if (current->next != nullptr) {
            current->next->prev = current->prev;
        } else {
            tail = current->prev;
        }

        delete current;
    }

    int getMax() {
        if (head == nullptr) {
            std::cout << "Doubly linked list is empty." << std::endl;
            return -1;
        }

        int maxVal = head->data;
        Node* current = head;
        while (current != nullptr) {
            if (current->data > maxVal) {
                maxVal = current->data;
            }
            current = current->next;
        }

        return maxVal;
    }

    void deleteMax() {
        int maxVal = getMax();
        if (maxVal == -1) {
            std::cout << "Cannot delete maximum value from an empty list." << std::endl;
            return;
        }

        Node* current = head;
        while (current != nullptr) {
            if (current->data == maxVal) {
                if (current->prev != nullptr) {
                    current->prev->next = current->next;
                } else {
                    head = current->next;
                }

                if (current->next != nullptr) {
                    current->next->prev = current->prev;
                } else {
                    tail = current->prev;
                }

                Node* toDelete = current;
                current = current->next;
                delete toDelete;
            } else {
                current = current->next;
            }
        }
    }

    void display() {
        Node* current = head;
        while (current != nullptr) {
            std::cout << current->data << " ";
            current = current->next;
        }
        std::cout << std::endl;
    }
};

int main() {
    DoublyLinkedList list;
    
    list.append(3);
    list.append(2);
    list.append(6);
    list.append(4);
    list.append(5);
    list.append(6);

    std::cout << "Original List: ";
    list.display();

    list.deleteMid();
    std::cout << "After deleting middle element: ";
    list.display();

    int maxVal = list.getMax();
    std::cout << "Maximum value in the list: " << maxVal << std::endl;

    list.deleteMax();
    std::cout << "After deleting maximum value(s): ";
    list.display();

    return 0;
}

