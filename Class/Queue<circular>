
#include <iostream>
using namespace std;

class CircularQueue {
private:
    int front, rear, size;
    int *arr;

public:
    CircularQueue(int s) {
        size = s;
        front = rear = -1;
        arr = new int[size];
    }

    // Function to check if the queue is empty
    bool isEmpty() {
        return (front == -1 && rear == -1);
    }

    // Function to check if the queue is full
    bool isFull() {
        return (front == (rear + 1) % size);
    }

    // Function to add an element to the queue
    void enqueue(int data) {
        if (isFull()) {
            cout << "Queue is full. Cannot enqueue." << endl;
            return;
        }
        if (isEmpty()) {
            front = rear = 0;
        } else {
            rear = (rear + 1) % size;
        }
        arr[rear] = data;
    }

    // Function to remove an element from the queue
    void dequeue() {
        if (isEmpty()) {
            cout << "Queue is empty. Cannot dequeue." << endl;
            return;
        }
        if (front == rear) {
            //while queue is full
            front = rear = -1;
        } else {
            front = (front + 1) % size;
        }
    }

    // Function to get the front element of the queue
    int getFront() {
        if (isEmpty()) {
            cout << "Queue is empty." << endl;
            return -1;

        return arr[front];
    }
};

int main() {
    CircularQueue q(5);
    q.enqueue(1);
    q.enqueue(2);
    q.enqueue(3);
    q.enqueue(4);
    q.enqueue(5);

    cout << "Front element: " << q.getFront() << endl;

    q.dequeue();
    q.enqueue(6);

    cout << "Front element after dequeue and enqueue: " << q.getFront() << endl;

    return 0;
}

