#include <iostream>

class Node {
public:
    int data;
    Node* next;

    Node(int value) : data(value), next(nullptr) {}
};

class SinglyLinkedList {
public:
    Node* head;

    SinglyLinkedList() : head(nullptr) {}

    // Function to add a new element to the front of the linked list
    void addToFront(int value) {
        Node* newNode = new Node(value);
        newNode->next = head;
        head = newNode;
    }

    // Function to print all the elements of the linked list
    void printList() {
        Node* current = head;
        std::cout << "Singly linked list containing the elements: [";
        while (current != nullptr) {
            std::cout << current->data;
            current = current->next;
            if (current != nullptr) {
                std::cout << ", ";
            }
        }
        std::cout << "]" << std::endl;
    }

    // Function to remove the first element of the linked list
    void removeFirst() {
        if (head != nullptr) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }

    // Function to remove the last element of the linked list
    void removeLast() {
        if (head == nullptr) {
            return;
        }

        if (head->next == nullptr) {
            delete head;
            head = nullptr;
        } else {
            Node* current = head;
            while (current->next->next != nullptr) {
                current = current->next;
            }
            delete current->next;
            current->next = nullptr;
        }
    }

    // Function to find the i-th index of the linked list
    int findAtIndex(int index) {
        Node* current = head;
        int currentIndex = 0;

        while (current != nullptr && currentIndex < index) {
            current = current->next;
            currentIndex++;
        }

        if (current != nullptr) {
            return current->data;
        } else {
            // Return a sentinel value (e.g., -1) to indicate index not found
            return -1;
        }
    }

    // Function to add a new element to the back of the linked list
    void addToBack(int value) {
        Node* newNode = new Node(value);

        if (head == nullptr) {
            head = newNode;
        } else {
            Node* current = head;
            while (current->next != nullptr) {
                current = current->next;
            }
            current->next = newNode;
        }
    }

    // Function to check if the linked list contains a given element
    bool contains(int element) {
        Node* current = head;
        while (current != nullptr) {
            if (current->data == element) {
                return true;
            }
            current = current->next;
        }
        return false;
    }

    // Function to sort the linked list in ascending order (using a simple bubble sort)
    void sortList() {
        if (head == nullptr || head->next == nullptr) {
            return;
        }

        bool swapped;
        Node* current;
        Node* lastNode = nullptr;

        do {
            swapped = false;
            current = head;

            while (current->next != lastNode) {
                if (current->data > current->next->data) {
                    // Swap data
                    int temp = current->data;
                    current->data = current->next->data;
                    current->next->data = temp;
                    swapped = true;
                }
                current = current->next;
            }

            lastNode = current;
        } while (swapped);
    }
};

int main() {
    SinglyLinkedList myList;

    // Adding elements to the front
    myList.addToFront(0);
    myList.addToFront(1);
    myList.addToFront(2);
    myList.addToFront(3);
    myList.addToFront(4);
    myList.addToFront(5);

    myList.printList();

    // Removing the first element
    myList.removeFirst();
    myList.printList();

    // Removing the last element
    myList.removeLast();
    myList.printList();

    // Finding an element at a specific index
    int indexToFind = 2;
    int elementAtIndex = myList.findAtIndex(indexToFind);
    if (elementAtIndex != -1) {
        std::cout << "Element at index " << indexToFind << ": " << elementAtIndex << std::endl;
    } else {
        std::cout << "Index " << indexToFind << " not found." << std::endl;
    }

    // Adding an element to the back
    myList.addToBack(0);
    myList.printList();

    // Checking if the list contains a specific element
    int elementToCheck = 3;
    bool containsElement = myList.contains(elementToCheck);
    if (containsElement) {
        std::cout << "List contains element " << elementToCheck << std::endl;
    } else {
        std::cout << "List does not contain element " << elementToCheck << std::endl;
    }

    // Sorting the list
    myList.sortList();
    myList.printList();

    return 0;
}

