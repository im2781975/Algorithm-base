
#include <iostream>
#include <vector>
#include <stack>

using namespace std;

class Graph {
public:
    Graph(int V);
    void addEdge(int u, int v);
    void topologicalSort();
private:
    int V;
    vector<vector<int>> adj;
    void topologicalSortUtil(int v, vector<bool>& visited, stack<int>& result);
};

Graph::Graph(int V) : V(V) {
    adj.resize(V);
}

void Graph::addEdge(int u, int v) {
    adj[u].push_back(v);
}

void Graph::topologicalSortUtil(int v, vector<bool>& visited, stack<int>& result) {
    visited[v] = true;

    for (int u : adj[v]) {
        if (!visited[u]) {
            topologicalSortUtil(u, visited, result);
        }
    }

    result.push(v);
}

void Graph::topologicalSort() {
    stack<int> result;
    vector<bool> visited(V, false);

    for (int i = 0; i < V; i++) {
        if (!visited[i]) {
            topologicalSortUtil(i, visited, result);
        }
    }

    while (!result.empty()) {
        cout << result.top() << " ";
        result.pop();
    }
}

int main() {
    Graph g(6);
    g.addEdge(5, 2);
    g.addEdge(5, 0);
    g.addEdge(4, 0);
    g.addEdge(4, 1);
    g.addEdge(2, 3);
    g.addEdge(3, 1);

    cout << "Topological Sort: ";
    g.topologicalSort();

    return 0;
}
