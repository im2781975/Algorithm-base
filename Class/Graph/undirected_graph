//Write down a c++ program to detect cycle in an undirected graph.		


#include <iostream>
#include <vector>
#include <list>

class Graph {
    int V;
    std::vector<std::list<int>> adj;

public:
    Graph(int V);
    void addEdge(int v, int w);
    bool isCyclic();
    bool isCyclicUtil(int v, bool visited, int parent);
};

Graph::Graph(int V) {
    this->V = V;
    adj.resize(V);
}

void Graph::addEdge(int v, int w) {
    adj[v].push_back(w);
    adj[w].push_back(v);
}

bool Graph::isCyclicUtil(int v, bool visited, int parent) {
    visited[v] = true;

    for (const auto& i : adj[v]) {
        if (!visited[i]) {
            if (isCyclicUtil(i, visited, v)) {
                return true;
            }
        } else if (i != parent) {
            return true;
        }
    }

    return false;
}

bool Graph::isCyclic() {
    std::vector<bool> visited(V, false);

    for (int i = 0; i < V; i++) {
        if (!visited[i]) {
            if (isCyclicUtil(i, visited, -1)) {
                return true;
            }
        }
    }

    return false;
}

int main() {
    Graph g(5); // Create a graph with 5 vertices

    // Add edges to the graph
    g.addEdge(0, 1);
    g.addEdge(1, 2);
    g.addEdge(2, 3);
    g.addEdge(3, 4);
    g.addEdge(4, 0);

    if (g.isCyclic()) {
        std::cout << "Graph contains a cycle." << std::endl;
    } else {
        std::cout << "Graph does not contain a cycle." << std::endl;
    }

    return 0;
}
