//In a graph of n nodes,find  the largest length of a path using c++
#include <iostream>
#include <vector>
using namespace std;

class Graph {
    int n;
    vector<vector<int>> adj;

public:
    Graph(int nodes) {
        n = nodes;
        adj.resize(n);
    }

    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u); // For undirected graph
    }

    int DFS(int v, vector<bool>& visited) {
        visited[v] = true;
        int max_depth = 0;

        for (int u : adj[v]) {
            if (!visited[u]) {
                int depth = DFS(u, visited);
                max_depth = max(max_depth, depth);
            }
        }

        return max_depth + 1;
    }

    int findLongestPath() {
        int longest_path = 0;
        for (int i = 0; i < n; i++) {
            vector<bool> visited(n, false);
            longest_path = max(longest_path, DFS(i, visited));
        }
        return longest_path - 1; // Subtract 1 because we count edges, not nodes
    }
};

int main() {
    int n, m; // Number of nodes and edges
    cin >> n >> m;

    Graph graph(n);

    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        graph.addEdge(u, v);
    }

    int longest_path = graph.findLongestPath();
    cout << "The longest path in the graph is of length: " << longest_path << endl;

    return 0;
}
