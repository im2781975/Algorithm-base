#include<bits/stdc++.h>
using namespace std;
struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};

class Solution {
public:
    bool hasCycle(ListNode* head) {
        if (head == nullptr || head->next == nullptr) {
            return false;  // No cycle if there are 0 or 1 nodes.
        }
        ListNode* slow = head;
        ListNode* fast = head;

        while (fast != nullptr && fast->next != nullptr) {
            slow = slow->next;
            fast =fast->next->next;
            if (slow == fast) {
                return true;  // Detected a cycle.
            }
        }
        return false;  
    }
};

int main() {
    ListNode* head = new ListNode(1);
    ListNode* node2 = new ListNode(2);
    ListNode* node3 = new ListNode(3);
    ListNode* node4 = new ListNode(4);
    ListNode* node5 = new ListNode(5);

    head->next = node2;
    node2->next = node3;
    node3->next = node4;
    node4->next = node5;
    node5->next = node2;  
    Solution solution;
    bool hasCycle = solution.hasCycle(head);

    if (hasCycle) {
        cout << "The linked list has a cycle.";
    } else {
     cout << "The linked list does not have a cycle.";
    }
    delete head;
    delete node2;
    delete node3;
    delete node4;
    delete node5;

    return 0;
}

