#include <bits/stdc++.h>
using namespace std;

class node {
public:
    int data;
    node* nxt;
    node(int val) : data(val), nxt(nullptr) {}
};

class singly {
private:
    int sz;
    node* head;

public:
    singly() : head(nullptr), sz(0) {}

    void insert_front(int val) {
        node* newnode = new node(val);
        newnode->nxt = head;
        head = newnode;
        sz++;
    }

    void remove_first() {
        if (head == nullptr) {
            return;
        }
        node* a = head;
        head = a->nxt;
        delete a;
        sz--;
    }

    void remove_last() {
        if (head == nullptr) {
            return;
        }
        if (head->nxt == nullptr) {
            delete head;
            head = nullptr;
        } else {
            node* a = head;
            while (a->nxt->nxt != nullptr) {
                a = a->nxt;
            }
            delete a->nxt;
            a->nxt = nullptr;
        }
        sz--;
    }

    int findAtIndex(int idx) {
        node* a = head;
        int cur_idx = 0;
        while (a != nullptr && cur_idx < idx) {
            a = a->nxt;
            cur_idx++;
        }
        if (a != nullptr) {
            return a->data;
        } else {
            return -1;
        }
    }

    void insert_tail(int val) {
        node* newnode = new node(val);
        if (head == nullptr) {
            head = newnode;
        } else {
            node* a = head;
            while (a->nxt != nullptr) {
                a = a->nxt;
            }
            a->nxt = newnode;
        }
        sz++;
    }

    bool contains(int val) {
        node* a = head;
        while (a != nullptr) {
            if (a->data == val) {
                return true;
            }
            a = a->nxt;
        }
        return false;
    }

    void sortlist() {
        if (head == nullptr || head->nxt == nullptr) {
            return;
        }
        node* a = head;
        bool swapped;
        node* b = nullptr;
        do {
            swapped = false;
            while (a->nxt != b) {
                if (a->data > a->nxt->data) {
                    swap(a->data, a->nxt->data);
                    swapped = true;
                }
                a = a->nxt;
            }
            b = a;
        } while (swapped);
    }
};

int main() {
    singly myList;

    myList.insert_front(3);
    myList.insert_front(1);
    myList.insert_tail(5);
    myList.insert_tail(2);
    myList.insert_tail(4);

    myList.sortlist();

    cout << "Sorted List: ";
    for (int i = 0; i < myList.size; i++) {
        cout << myList.findAtIndex(i) << " ";
    }

    return 0;
}

