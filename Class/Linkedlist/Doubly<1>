#include<bits/stdc++.h>
using namespace std;
class node
{
public:
    int data;
    node *nxt;
    node *prv;
    node(int val) : data(val), nxt(nullptr), prv(nullptr) {}
};

class doubly
{
public:
    node *head;
    node *tail;
    doubly() : head(nullptr), tail(nullptr) {}

    void insert_front(int val)
    {
        node *newnode = new node(val);
        if (head == nullptr)
        {
            head = tail = newnode;
        }
        else
        {
            newnode->nxt = head;
            head->prv = newnode;
            head = newnode;
        }
    }

    void remove_back()
    {
        if (tail == nullptr)
        {
            std::cout << "List is empty." << std::endl;
        }
        else if (head == tail)
        {
            delete tail;
            head = tail = nullptr;
        }
        else
        {
            node *tmp = tail;
            tail = tail->prv;
            tail->nxt = nullptr;
            delete tmp;
        }
    }

    void remove_front()
    {
        if (head == nullptr)
        {
            std::cout << "List is empty." << std::endl;
        }
        else if (head == tail)
        {
            delete head;
            head = tail = nullptr;
        }
        else
        {
            node *tmp = head;
            head = head->nxt;
            head->prv = nullptr;
            delete tmp;
        }
    }

    int search_idx(int idx)
    {
        node *a = head;
        int cur_idx = 0;
        while (a != nullptr && cur_idx < idx)
        {
            a = a->nxt;
            cur_idx++;
        }
        if (a == nullptr)
        {
            std::cout << "Index doesn't exist." << std::endl;
            return -1;
        }
        return a->data;
    }

    bool search_distinct(int val)
    {
        node *a = head;
        while (a != nullptr)
        {
            if (a->data == val)
            {
                return true;
            }
            a = a->nxt;
        }
        return false;
    }

    void reverse()
    {
        node *tmp = nullptr;
        node *a = head;
        while (a != nullptr)
        {
            tmp = a->prv;
            a->prv = a->nxt;
            a->nxt = tmp;
            a = a->prv;
        }
        if (tmp != nullptr)
        {
            head = tmp->prv;
        }
    }

    void insert_any_idx(int idx, int val)
    {
        if (idx == 0)
        {
            insert_front(val);
        }
        else
        {
            node *newnode = new node(val);
            node *a = head;
            int cur_idx = 0;
            while (a != nullptr && cur_idx < idx)
            {
                a = a->nxt;
                cur_idx++;
            }
            if (a == nullptr)
            {
                std::cout << "Index doesn't exist." << std::endl;
                return;
            }
            newnode->nxt = a->nxt;
            newnode->prv = a;
            if (a->nxt != nullptr)
            {
                a->nxt->prv = newnode;
            }
            a->nxt = newnode;
        }
    }

    void erase_val(int val)
    {
        node *a = head;
        while (a != nullptr)
        {
            if (a->data == val)
            {
                if (a->prv != nullptr)
                {
                    a->prv->nxt = a->nxt;
                }
                if (a->nxt != nullptr)
                {
                    a->nxt->prv = a->prv;
                }
                if (a == head)
                {
                    head = a->nxt;
                }
                if (a == tail)
                {
                    tail = a->prv;
                }
                delete a;
                return;
            }
            a = a->nxt;
        }
        std::cout << "Value doesn't exist." << std::endl;
    }
    bool is_palindrome()
    {
        node *a=head;
        node *b=tail;
        if(a!=nullptr && b!=nullptr)
        {
            if(a->data!=b->data)
            {
                return false;
            }
            a=a->nxt;
            b=b->prv;
        }
        return true;
    }
    void print()
    {
        node *a=head;
        while(a!=nullptr)
        {
            cout<<a->data<<" ";
            a=a->nxt;
        }
    }
};
int main()
{
    doubly myList;

    myList.insert_front(1);
    myList.insert_front(2);
    myList.insert_front(3);

    myList.print(); // Print the list: 3 2 1

    myList.reverse();

    myList.print(); // Print the reversed list: 1 2 3

    int indexToSearch = 1;
    int searchedValue = myList.search_idx(indexToSearch);
    if (searchedValue != -1)
    {
        cout << "Value at index " << indexToSearch << ": " << searchedValue << endl;
    }

    int valueToSearch = 2;
    if (myList.search_distinct(valueToSearch))
    {
        cout << "Value " << valueToSearch << " exists in the list." << endl;
    }

    myList.erase_val(2);
    myList.print(); // Print the list after erasing value 2: 1 3

    if (myList.is_palindrome())
    {
        cout << "The list is a palindrome." << endl;
    }
    else
    {
        cout << "The list is not a palindrome." << endl;
    }

    return 0;
}
