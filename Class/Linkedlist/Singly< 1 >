#include<bits/stdc++.h>
using namespace std;
class node
{
    public:
    int data;
    node *nxt;
    node(int val):data(val),nxt(nullptr){}
};
class singly
{
    private:
    int sz;
    node *head;
    public:
    singly():head(nullptr),sz(0){}
    
    void insert_head(int val)
    {
        node *newnode=new node(val);
        node *a=head;
        if(head=nullptr)
        {
            head=newnode;
        }
        newnode->nxt=head;
        head=newnode;
    }
    void insert_tail(int val)
    {
        node *newnode=new node(val);
        if(head==nullptr)
        {
            head=newnode;
            return;
        }
        else
        {
        node *a=head;
        while(a->nxt!=nullptr)
        {
            a=a->nxt;
        }
        a->nxt=newnode;
        }
        sz++;
    }
    int get_value(int idx)
    {
        if(idx<0 || idx>sz)
        {
            return -1;
        }
        node *a=head;
        for(int i=0;i<idx;i++)
        {
            a=a->nxt;
        }
        return a->data;
    }
    void delete_zero()
    {
    while (head != nullptr && head->data == 0)
    {
        node *temp = head;
        head = head->nxt;
        delete temp;
        sz--;
    }

    if (head == nullptr)
        return;

    node *a = head;
    while (a->nxt != nullptr)
    {
        if (a->nxt->data == 0)
        {
            node *temp = a->nxt;
            a->nxt = a->nxt->nxt;
            delete temp;
            sz--;
        }
        else
        {
            a = a->nxt;
        }
    }
    }
    int get_idx_sum()
    {
        node *a=head;
        int idx=0,sum=0;
        while(a!=nullptr)
        {
            if(idx%2==1)
            {
                sum+=a->data;
            }
            idx++;
            a=a->nxt;
        }
        return sum;
    }
    void removeFirst() {
        if (head != nullptr) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }

    void removeLast() {
        if (head != nullptr) {
            if (head->next == nullptr) {
                delete head;
                head = nullptr;
            } else {
                Node* current = head;
                while (current->next->next != nullptr) {
                    current = current->next;
                }
                delete current->next;
                current->next = nullptr;
            }
        }
    }

    int findAtIndex(int index) {
        Node* current = head;
        int currentIndex = 0;
        while (current != nullptr) {
            if (currentIndex == index) {
                return current->data;
            }
            current = current->next;
            currentIndex++;
        }
        return -1;  // Element not found
    }

    void addToBack(int val) {
        Node* newNode = new Node(val);
        if (head == nullptr) {
            head = newNode;
        } else {
            Node* current = head;
            while (current->next != nullptr) {
                current = current->next;
            }
            current->next = newNode;
        }
    }

    bool contains(int element) {
        Node* current = head;
        while (current != nullptr) {
            if (current->data == element) {
                return true;
            }
            current = current->next;
        }
        return false;
    }
bool hasDuplicate() {
        node* a = head;
        while (a!= nullptr) {
            node* b = a->nxt;
            while (b != nullptr) {
                if (b->data == a->data) {
                    return true;
                }
                b = b->nxt;
            }
            a = a->nxt;
        }
        return false;
    }
};
int main()
{
    singly myList; 
    myList.insert_tail(1);
    myList.insert_tail(2);
    myList.insert_tail(3);
    myList.insert_tail(2);
    myList.insert_tail(4);
    if (myList.hasDuplicate()) {
        cout << "The list has duplicate values." << endl;
    } else {
        cout << "The list does not have any duplicates." << endl;
    }

    int indexToGet = 2;
    int value = myList.get_value(indexToGet);
    if (value != -1) {
        cout << "Value at index " << indexToGet << ": " << value << endl;
    } else {
        cout << "Invalid index." << endl;
    }

    myList.delete_zero();

    int oddIndexSum = myList.get_idx_sum();
    cout << "Sum of values at odd indices: " << oddIndexSum << endl;

    return 0;
}
