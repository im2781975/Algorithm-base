#include<bits/stdc++.h>
using namespace std;
class node
{
    public:
    int data;
    node * nxt;
    node * prv;
};
class Doubly
{
    public:
    node *head;
    int sz;
    Doubly()
    {
        head = NULL;
        sz = 0;
    }
    node * Create(int data)
    {
        node *newnode = new node;
        newnode->data = data;
        newnode->nxt = NULL;
        newnode->prv = NULL;
        return newnode;
    }
    void InsertAtHead(int data)
    {
        sz++;
        node *newnode = Create(data);
        if(head == NULL)
        {
            head = newnode;
            return;
        }
        node *a = head;
        newnode->nxt = a;
        a->prv = newnode;
        head = newnode;
    }
    void Insert(int index, int data)
    {
        if(index > sz)
        {
            return;
        }
        if(index==0)
        {
            InsertAtHead(data);
            return;
        }
        node *a = head;
        int cur_index = 0;
        while(cur_index!= index-1)
        {
            a = a->nxt;
            cur_index++;
        }
        node *newnode = Create(data);
        newnode->nxt = a->nxt;
        newnode->prv = a;
        node *b = a->nxt;
        b->prv = newnode;
        a->nxt = newnode;
        sz++;

    }
    void Delete(int index)
    {
        if(index >= sz)
        {
            cout<<index<<" doesn't exist.\n";
            return;
        }
        node *a = head;
        int cur_index = 0;
        while(cur_index != index)
        {
            a = a->nxt;
            cur_index++;
        }
        node *b = a->prv;
        node *c = a->nxt;
        if(b!=NULL)
        {
            b->nxt = c;
        }
        if(c!= NULL)
        {
            c->prv = b;
        }
        delete a;
        if(index==0)
        {
            head = c;
        }
        sz--;
    }
    void Traverse()
    {
        node *a = head;
        while(a!=NULL)
        {
            cout<<a->data<<" ";
            a = a->nxt;
        }
        cout<<"\n";
    }
    int getSize()
    {
        return sz;
    }
    void Reverse()
    {
        if(head==NULL)
        {
            return;
        }
        node *a = head;
        int cur_index = 0;
        while(cur_index != sz-1)
        {
            a = a->nxt;
            cur_index++;
        }
        node *b = head;
        while(b!= NULL)
        {
            swap(b->nxt, b->prv);
            b = b->prv;
        }
        head = a;
    }
    void swap_idx(int i, int j)
    {
        if (i >= sz || j >= sz)
        {
            cout << "Index out of range." << endl;
            return;
        }
        node* node1 = head;
        int cur_index = 0;
        while (cur_index != i)
        {
            node1 = node1->nxt;
            cur_index++;
        }
        node* node2 = head;
        cur_index = 0;
        while (cur_index != j)
        {
            node2 = node2->nxt;
            cur_index++;
        }
        int temp = node1->data;
        node1->data = node2->data;
        node2->data = temp;
    }
    void DeleteByValue(int value)
    {
        node* cur = head;
        while (cur)
        {
            if (cur->data == value)
            {
                node* temp = cur;
                if (cur->prv)
                {
                    cur->prv->nxt = cur->nxt;
                }
                if (cur->nxt)
                {
                    cur->nxt->prv = cur->prv;
                }
                if (cur == head)
                {
                    head = cur->nxt;
                }
                cur = cur->nxt;
                sz--;
                delete temp;
            }
            else
            {
                cur = cur->nxt;
            }
        }
    }
};
int main()
{
    DoublyLinkedList dl;
    dl.InsertAtHead(7);
    dl.InsertAtHead(4);
    dl.InsertAtHead(6);
    dl.InsertAtHead(2);
    dl.InsertAtHead(3);
    dl.Traverse();
    dl.swap_idx(1, 4);
    dl.DeleteByValue(0);
    dl.Traverse();
    return 0;

}
