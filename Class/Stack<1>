#include <iostream>

template <typename T>
class Node {
public:
    T data;
    Node* next;

    Node(T value) : data(value), next(nullptr) {}
};

template <typename T>
class Stack {
public:
    Stack() : top(nullptr) {}

    void push(T value) {
        Node<T>* newNode = new Node<T>(value);
        newNode->next = top;
        top = newNode;
    }

    void pop() {
        if (top) {
            Node<T>* temp = top;
            top = top->next;
            delete temp;
        } else {
            std::cout << "Stack is empty. Cannot pop." << std::endl;
        }
    }

    T peek() {
        if (top) {
            return top->data;
        } else {
            std::cerr << "Stack is empty. Cannot peek." << std::endl;
            exit(1); // You can handle this error differently if needed
        }
    }

    bool isEmpty() {
        return top == nullptr;
    }

    ~Stack() {
        while (!isEmpty()) {
            pop();
        }
    }

private:
    Node<T>* top;
};

int main() {
    Stack<int> intStack;
    intStack.push(1);
    intStack.push(2);
    intStack.push(3);

    std::cout << "Top element: " << intStack.peek() << std::endl;

    intStack.pop();
    std::cout << "Top element after pop: " << intStack.peek() << std::endl;

    Stack<std::string> stringStack;
    stringStack.push("Hello");
    stringStack.push("World");

    std::cout << "Top element of string stack: " << stringStack.peek() << std::endl;

    return 0;
}
