#include <iostream>
using namespace std;

template <typename T>
class node {
public:
    T data;
    node* next;
    node* prev;
    node(T val) : data(val), next(nullptr), prev(nullptr) {}
};

template <typename T>
class Deque {
private:
    node<T>* frontNode; // Change from head to frontNode
    node<T>* backNode;  // Change from tail to backNode
    size_t size;

public:
    Deque() : frontNode(nullptr), backNode(nullptr), size(0) {}
    
    void push_front(T val) {
        node<T>* newnode = new node<T>(val);
        if (size == 0) {
            frontNode = backNode = newnode;
        } else {
            newnode->next = frontNode;
            frontNode->prev = newnode;
            frontNode = newnode;
        }
        size++;
    }

    void push_back(T val) {
        node<T>* newnode = new node<T>(val);
        if (size == 0) {
            frontNode = backNode = newnode;
        } else {
            newnode->prev = backNode;
            backNode->next = newnode;
            backNode = newnode;
        }
        size++;
    }

    void pop_front() {
        if (size == 0) {
            std::cerr << "Deque is empty, cannot pop_front." << std::endl;
            return;
        }
        if (size == 1) {
            delete frontNode;
            frontNode = backNode = nullptr;
        } else {
            node<T>* temp = frontNode;
            frontNode = frontNode->next;
            frontNode->prev = nullptr;
            delete temp;
        }
        size--;
    }

    void pop_back() {
        if (size == 0) {
            std::cerr << "Deque is empty, cannot pop_back." << std::endl;
            return;
        }
        if (size == 1) {
            delete backNode;
            frontNode = backNode = nullptr;
        } else {
            node<T>* temp = backNode;
            backNode = backNode->prev;
            backNode->next = nullptr;
            delete temp;
        }
        size--;
    }

    T front() {
        if (size == 0) {
            std::cerr << "Deque is empty, front() not available." << std::endl;
            return T();
        }
        return frontNode->data;
    }

    T back() {
        if (size == 0) {
            std::cerr << "Deque is empty, back() not available." << std::endl;
            return T();
        }
        return backNode->data;
    }

    size_t getSize() {
        return size;
    }
};

int main() {
    Deque<int> deque;
    
    deque.push_back(1);
    deque.push_front(2);
    deque.push_back(3);

    std::cout << "Front: " << deque.front() << std::endl;
    std::cout << "Back: " << deque.back() << std::endl;

    deque.pop_front();
    deque.pop_back();

    std::cout << "Front after pop_front: " << deque.front() << std::endl;
    std::cout << "Back after pop_back: " << deque.back() << std::endl;

    return 0;
}
