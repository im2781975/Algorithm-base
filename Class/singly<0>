#include <iostream>

class Node {
public:
    int data;
    Node* next;
};

class SinglyLinkedList {
private:
    Node* head;
    int size;

public:
    SinglyLinkedList() {
        head = nullptr;
        size = 0;
    }

    // Add nodes, delete nodes, and other functions as needed.

    int getValue(int index) {
        if (index < 0 || index >= size) {
            return -1;
        }

        Node* current = head;
        for (int i = 0; i < index; i++) {
            current = current->next;
        }

        return current->data;
    }

    void deleteZero() {
        Node* current = head;
        Node* prev = nullptr;

        while (current != nullptr) {
            if (current->data == 0) {
                if (prev == nullptr) {
                    head = current->next;
                } else {
                    prev->next = current->next;
                }
                Node* temp = current;
                current = current->next;
                delete temp;
                size--;
            } else {
                prev = current;
                current = current->next;
            }
        }
    }

    int getOddIndexSum() {
        int sum = 0;
        Node* current = head;
        int index = 0;

        while (current != nullptr) {
            if (index % 2 == 1) {  // Odd index
                sum += current->data;
            }
            current = current->next;
            index++;
        }

        return sum;
    }

    bool hasDuplicate() {
        Node* current = head;
        while (current != nullptr) {
            Node* checker = current->next;
            while (checker != nullptr) {
                if (checker->data == current->data) {
                    return true;
                }
                checker = checker->next;
            }
            current = current->next;
        }

        return false;
    }

    // Add other helper methods as needed.
};

