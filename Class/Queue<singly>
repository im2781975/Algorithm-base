Implement Template based Queue using a singly linked-list in c++


#include <iostream>

template <typename T>
class Node {
public:
    T data;
    Node* next;
    Node(T value) : data(value), next(nullptr) {}
};

template <typename T>
class Queue {
private:
    Node<T>* front;
    Node<T>* rear;

public:
    Queue() : front(nullptr), rear(nullptr) {}

    void enqueue(T value) {
        Node<T>* newNode = new Node<T>(value);
        if (rear == nullptr) {
            front = rear = newNode;
            return;
        }
        rear->next = newNode;
        rear = newNode;
    }

    void dequeue() {
        if (isEmpty()) {
            std::cout << "Queue is empty. Cannot dequeue." << std::endl;
            return;
        }
        Node<T>* temp = front;
        front = front->next;
        delete temp;
        if (front == nullptr) {
            rear = nullptr;  // The queue is now empty
        }
    }

    T peek() {
        if (isEmpty()) {
            std::cout << "Queue is empty. Cannot peek." << std::endl;
            throw std::runtime_error("Queue is empty");
        }
        return front->data;
    }

    bool isEmpty() {
        return front == nullptr;
    }
};

int main() {
    Queue<int> queue;

    queue.enqueue(1);
    queue.enqueue(2);
    queue.enqueue(3);

    std::cout << "Front of the queue: " << queue.peek() << std::endl;

    queue.dequeue();
    std::cout << "Front of the queue after dequeue: " << queue.peek() << std::endl;

    return 0;
}

