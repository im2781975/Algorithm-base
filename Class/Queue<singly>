#include<bits/stdc++.h>
using namespace std;
template<typename T>
class node{
    public:
    T data;
    node *nxt;
    node(T val):data(val), nxt(nullptr){}
};
template<typename T>
class Queue{
    node <T> *front, *rear;
    public:
    Queue():front(nullptr), rear(nullptr){}
    bool IsEmpty(){
        return front == nullptr;
    }
    void enqueue(T val){
        node <T> *newnode = new node<T>(val);
        if(front == rear){
            front = rear = newnode;
            return;
        }
        rear->nxt = newnode;
        rear = newnode;
    }
    void dequeue(){
        if(IsEmpty()){
            cout << "\nQueue is empty";
            return;
        }
        node <T> *tmp = front;
        front = front->nxt;
        delete tmp;
        if(front == nullptr)
            rear = nullptr;
    }
    T peek(){
        if(IsEmpty()){
            cout << "Queue is Empty";
            return T();
        }
        return front->data;
    }
};
int main(){
    Queue <int> q;
    q.enqueue(2);
    q.enqueue(4);
    q.enqueue(7);
    cout << "\nFront: " << q.peek();
}
